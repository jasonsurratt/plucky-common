using System;
using System.Collections.Generic;
using System.Text;
using UnityEditor;
using UnityEngine;
using UnityEngine.Assertions;

namespace Plucky.Common
{
    public class SmoothRng : AbstractRng
    {
        public float seed
        {
            get => _seed;
            set { _seed = value; Reset(); }
        }
        float _seed = 0;
        
        public float offset;
        static float[] perlinThresholds = new float[] {
            -0.07091679f, 0.003814215f, 0.0253427f, 0.04014447f, 0.0519441f,
            0.06154555f, 0.07023416f, 0.07738716f, 0.0821514f, 0.0865496f,
            0.0915326f, 0.09508395f, 0.0987534f, 0.1031715f, 0.1065403f,
            0.1108158f, 0.1145824f, 0.117768f, 0.1210195f, 0.1232595f,
            0.1251427f, 0.1281176f, 0.1281198f, 0.1305282f, 0.1328577f,
            0.135604f, 0.1364119f, 0.1371642f, 0.1390753f, 0.1391275f,
            0.1397486f, 0.1420123f, 0.1422123f, 0.143267f, 0.1453801f,
            0.1456575f, 0.1465326f, 0.1484596f, 0.151078f, 0.15294f,
            0.1551035f, 0.1578685f, 0.1598793f, 0.1613614f, 0.1633136f,
            0.164908f, 0.1660136f, 0.1667647f, 0.1685501f, 0.1703773f,
            0.172453f, 0.1742585f, 0.1756474f, 0.177498f, 0.1789035f,
            0.1809522f, 0.1828786f, 0.185033f, 0.1865375f, 0.1882671f,
            0.1900802f, 0.1918426f, 0.1935808f, 0.1953669f, 0.1968163f,
            0.1986547f, 0.2006541f, 0.2018955f, 0.2036945f, 0.2050959f,
            0.2066095f, 0.2081965f, 0.209563f, 0.2111885f, 0.2123072f,
            0.2137822f, 0.215182f, 0.2163508f, 0.218189f, 0.2182744f,
            0.2182744f, 0.2194762f, 0.220471f, 0.2217396f, 0.2231846f,
            0.2243879f, 0.2254713f, 0.2255224f, 0.2257751f, 0.2267605f,
            0.2278999f, 0.2290841f, 0.230709f, 0.2318918f, 0.2329268f,
            0.2329268f, 0.233926f, 0.2351265f, 0.2363732f, 0.2374636f,
            0.2386453f, 0.2396427f, 0.2404723f, 0.2404723f, 0.2411853f,
            0.2423171f, 0.2433591f, 0.2443354f, 0.2451455f, 0.2464091f,
            0.2473212f, 0.2483113f, 0.2493711f, 0.2503336f, 0.2518138f,
            0.2525861f, 0.2535985f, 0.2545507f, 0.2553662f, 0.2561303f,
            0.2570417f, 0.2578118f, 0.2590838f, 0.2600659f, 0.2610351f,
            0.2616777f, 0.2617951f, 0.2618065f, 0.2624844f, 0.2634226f,
            0.264359f, 0.2655365f, 0.2664991f, 0.267226f, 0.2681554f,
            0.2690544f, 0.2701757f, 0.2711472f, 0.2723211f, 0.2732978f,
            0.2741321f, 0.2753245f, 0.2761604f, 0.2774833f, 0.2787642f,
            0.2793913f, 0.2803336f, 0.2811485f, 0.2816564f, 0.2819979f,
            0.2819979f, 0.2822641f, 0.282625f, 0.2831105f, 0.283555f,
            0.2841925f, 0.2845109f, 0.2854841f, 0.2860827f, 0.2869935f,
            0.2879627f, 0.2887577f, 0.2896007f, 0.2903866f, 0.2909504f,
            0.2916289f, 0.2924827f, 0.2933088f, 0.2938048f, 0.2946214f,
            0.295517f, 0.2957079f, 0.2962589f, 0.2966959f, 0.2966959f,
            0.2966959f, 0.2966959f, 0.2969995f, 0.2976517f, 0.2984216f,
            0.2985353f, 0.2993871f, 0.2996853f, 0.3005225f, 0.3012186f,
            0.3013499f, 0.3021225f, 0.3027746f, 0.3036491f, 0.3043936f,
            0.3044881f, 0.3051323f, 0.3058022f, 0.3066496f, 0.307675f,
            0.3083601f, 0.309067f, 0.3094199f, 0.3103038f, 0.3109948f,
            0.3118372f, 0.3125504f, 0.3132847f, 0.3137969f, 0.3141463f,
            0.3141463f, 0.3142845f, 0.3147695f, 0.3155232f, 0.3161411f,
            0.3169099f, 0.3174925f, 0.3177947f, 0.3184687f, 0.3190242f,
            0.319612f, 0.320304f, 0.3211659f, 0.3212901f, 0.3221789f,
            0.3231292f, 0.3239313f, 0.3247813f, 0.3252213f, 0.3255298f,
            0.3262305f, 0.3271407f, 0.3280887f, 0.3291041f, 0.3292741f,
            0.3298045f, 0.3307741f, 0.3314148f, 0.3323301f, 0.3332005f,
            0.3340383f, 0.335231f, 0.3360538f, 0.3370331f, 0.338163f,
            0.3389494f, 0.3397416f, 0.3407676f, 0.3415172f, 0.3424772f,
            0.3431459f, 0.3438208f, 0.3446575f, 0.3451105f, 0.3460042f,
            0.3466119f, 0.3474188f, 0.3482584f, 0.348968f, 0.3492888f,
            0.3494893f, 0.3506808f, 0.3511797f, 0.3512855f, 0.3519745f,
            0.3526531f, 0.3534285f, 0.3540799f, 0.3549016f, 0.3552773f,
            0.355772f, 0.3564705f, 0.3572991f, 0.3579406f, 0.3586288f,
            0.3588239f, 0.3588822f, 0.3594964f, 0.3602527f, 0.3608282f,
            0.3611922f, 0.3616983f, 0.3622463f, 0.3628954f, 0.3634569f,
            0.364035f, 0.3647807f, 0.3654311f, 0.3658426f, 0.3663635f,
            0.3663635f, 0.3664937f, 0.3664974f, 0.3665016f, 0.366549f,
            0.3669991f, 0.3673571f, 0.3679376f, 0.368478f, 0.3685038f,
            0.3685886f, 0.3692185f, 0.3695951f, 0.3697729f, 0.369842f,
            0.3705693f, 0.3710978f, 0.3713208f, 0.3714019f, 0.3717255f,
            0.3719631f, 0.3724196f, 0.3728121f, 0.3728664f, 0.3731414f,
            0.3731652f, 0.3738105f, 0.3743774f, 0.3750107f, 0.3757346f,
            0.3761975f, 0.3765931f, 0.377115f, 0.3774629f, 0.3777028f,
            0.3784373f, 0.3788588f, 0.3794515f, 0.3799589f, 0.3805068f,
            0.3810506f, 0.381652f, 0.3819183f, 0.3819183f, 0.3823202f,
            0.3823375f, 0.382453f, 0.3830174f, 0.38365f, 0.384462f,
            0.3849306f, 0.3851023f, 0.3853702f, 0.3859412f, 0.386428f,
            0.3869725f, 0.3875841f, 0.3878396f, 0.3879526f, 0.3883095f,
            0.3885623f, 0.3885623f, 0.3892165f, 0.3899177f, 0.3906372f,
            0.3913314f, 0.3918087f, 0.3919087f, 0.3923739f, 0.3925403f,
            0.3932816f, 0.3938108f, 0.3946193f, 0.3954278f, 0.3960069f,
            0.3964263f, 0.39685f, 0.3970161f, 0.3975809f, 0.3979821f,
            0.3981416f, 0.3988226f, 0.3995628f, 0.4004291f, 0.4012537f,
            0.4014349f, 0.402018f, 0.40269f, 0.4034422f, 0.4040925f,
            0.4047078f, 0.4055431f, 0.4062665f, 0.4069028f, 0.4072844f,
            0.4078315f, 0.4085387f, 0.4090985f, 0.4098932f, 0.4106598f,
            0.4115595f, 0.4123662f, 0.412922f, 0.412922f, 0.412922f,
            0.413589f, 0.4144306f, 0.4151581f, 0.4158614f, 0.4167258f,
            0.417477f, 0.4176553f, 0.4176553f, 0.4182674f, 0.4184465f,
            0.4191723f, 0.4201952f, 0.421005f, 0.4216584f, 0.4223159f,
            0.4223159f, 0.422732f, 0.4232276f, 0.4237181f, 0.4244722f,
            0.4250884f, 0.4260171f, 0.4267605f, 0.4270934f, 0.4272855f,
            0.4281151f, 0.4290144f, 0.4295093f, 0.4303247f, 0.4310616f,
            0.4317791f, 0.4319731f, 0.4322303f, 0.4328739f, 0.4335558f,
            0.4341569f, 0.4349686f, 0.435703f, 0.4364075f, 0.437109f,
            0.437781f, 0.4385409f, 0.4390385f, 0.4397408f, 0.4403729f,
            0.4411254f, 0.4416799f, 0.4423699f, 0.4432189f, 0.4438975f,
            0.4443697f, 0.4449185f, 0.4457268f, 0.4466228f, 0.4473201f,
            0.4480751f, 0.4486231f, 0.449225f, 0.4498299f, 0.4499038f,
            0.4502392f, 0.4510502f, 0.4517f, 0.4521339f, 0.4525672f,
            0.4531586f, 0.4539642f, 0.4541737f, 0.4547326f, 0.4551895f,
            0.4558019f, 0.4558019f, 0.4563137f, 0.4569864f, 0.4575037f,
            0.4580725f, 0.4587818f, 0.4592999f, 0.459301f, 0.4593015f,
            0.4593054f, 0.4593099f, 0.4593758f, 0.4598704f, 0.4604762f,
            0.4608534f, 0.4613938f, 0.4616734f, 0.4621112f, 0.4624065f,
            0.4629365f, 0.4638708f, 0.4643368f, 0.4649112f, 0.4652686f,
            0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f,
            0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f,
            0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f,
            0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f,
            0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f,
            0.4652731f, 0.4652731f, 0.4652731f, 0.4652731f, 0.4652776f,
            0.4654564f, 0.4661931f, 0.4668911f, 0.4675544f, 0.4680161f,
            0.4683573f, 0.4690878f, 0.4697612f, 0.470042f, 0.4706925f,
            0.4710473f, 0.4712363f, 0.4712363f, 0.4712386f, 0.4712407f,
            0.4712407f, 0.471243f, 0.4712452f, 0.4712452f, 0.4718051f,
            0.4725118f, 0.4730034f, 0.4736626f, 0.474413f, 0.4747442f,
            0.4748764f, 0.4755491f, 0.4759801f, 0.4763725f, 0.4763789f,
            0.4770432f, 0.4776714f, 0.4784123f, 0.4785476f, 0.4792139f,
            0.4797635f, 0.4804461f, 0.480621f, 0.4806424f, 0.4812677f,
            0.4818576f, 0.4827306f, 0.4836078f, 0.4842428f, 0.4851598f,
            0.4859374f, 0.4863989f, 0.487123f, 0.4877316f, 0.4886672f,
            0.4895498f, 0.4903505f, 0.4909524f, 0.4916036f, 0.4920516f,
            0.4928563f, 0.4934436f, 0.4941386f, 0.4948297f, 0.4955561f,
            0.4962662f, 0.4971399f, 0.4976045f, 0.4982369f, 0.498573f,
            0.4986204f, 0.4993153f, 0.4999627f, 0.5010379f, 0.5014144f,
            0.501808f, 0.5028172f, 0.5034528f, 0.5034528f, 0.5039899f,
            0.5047736f, 0.5053585f, 0.5059834f, 0.5066493f, 0.5073239f,
            0.5079213f, 0.5082303f, 0.508578f, 0.5091782f, 0.5096972f,
            0.5105599f, 0.5113641f, 0.5118014f, 0.5122707f, 0.5127359f,
            0.5128908f, 0.5132159f, 0.5139986f, 0.5150185f, 0.5158358f,
            0.5167067f, 0.5175824f, 0.5176242f, 0.5176772f, 0.5182331f,
            0.5190364f, 0.5197868f, 0.5206428f, 0.5213463f, 0.5220088f,
            0.5223582f, 0.522844f, 0.5231417f, 0.523533f, 0.5240616f,
            0.5248904f, 0.5256529f, 0.5263218f, 0.527104f, 0.528139f,
            0.5288281f, 0.5292888f, 0.5295838f, 0.5301709f, 0.5309192f,
            0.531502f, 0.5321151f, 0.532564f, 0.5327261f, 0.5332939f,
            0.5336961f, 0.5340185f, 0.5346052f, 0.53541f, 0.5363098f,
            0.5368865f, 0.537635f, 0.5380955f, 0.5381723f, 0.5386456f,
            0.5387375f, 0.5391788f, 0.5401092f, 0.5407677f, 0.5413923f,
            0.5419839f, 0.5419866f, 0.5424275f, 0.5427066f, 0.5427509f,
            0.5433424f, 0.5438928f, 0.5445601f, 0.5450788f, 0.5454438f,
            0.5456484f, 0.5460054f, 0.5467297f, 0.5471451f, 0.5477385f,
            0.5482087f, 0.548244f, 0.5485499f, 0.5486278f, 0.5487216f,
            0.5491558f, 0.5497167f, 0.5502221f, 0.5508958f, 0.5516233f,
            0.5519609f, 0.5525759f, 0.5530832f, 0.5532143f, 0.553589f,
            0.5541181f, 0.554615f, 0.5551858f, 0.5558699f, 0.5564167f,
            0.5568931f, 0.5574048f, 0.5574659f, 0.5576798f, 0.5577701f,
            0.5583483f, 0.558583f, 0.5586967f, 0.5590519f, 0.5592253f,
            0.5592253f, 0.5597798f, 0.560332f, 0.5607733f, 0.5607733f,
            0.561357f, 0.5620423f, 0.5620423f, 0.562476f, 0.5631562f,
            0.5636092f, 0.5639971f, 0.5640488f, 0.5640488f, 0.5641826f,
            0.5641826f, 0.5645565f, 0.5650806f, 0.565699f, 0.5663235f,
            0.5668629f, 0.5675836f, 0.5681669f, 0.5686376f, 0.5694005f,
            0.570105f, 0.5710368f, 0.5717109f, 0.5717223f, 0.571996f,
            0.5728012f, 0.5734837f, 0.5745565f, 0.5752865f, 0.5759364f,
            0.5768914f, 0.5775326f, 0.5784703f, 0.5791355f, 0.5793664f,
            0.5795177f, 0.5802391f, 0.5810566f, 0.5812573f, 0.581645f,
            0.5822763f, 0.5829548f, 0.5837606f, 0.5842535f, 0.5848315f,
            0.5854657f, 0.5858352f, 0.5865496f, 0.5872242f, 0.5880917f,
            0.5890406f, 0.5897452f, 0.5905105f, 0.5914841f, 0.5923832f,
            0.5932924f, 0.5941721f, 0.5951129f, 0.5957307f, 0.5966855f,
            0.5976647f, 0.5986109f, 0.5996347f, 0.6002942f, 0.6011089f,
            0.601272f, 0.6018424f, 0.6026505f, 0.6033995f, 0.6043772f,
            0.605225f, 0.6053249f, 0.6058614f, 0.6064504f, 0.6071298f,
            0.6077501f, 0.6085986f, 0.609256f, 0.6093972f, 0.6101834f,
            0.6106775f, 0.6111926f, 0.6116661f, 0.6119641f, 0.6123708f,
            0.6130537f, 0.6132627f, 0.6139582f, 0.6147562f, 0.6155412f,
            0.6160038f, 0.6163999f, 0.6163999f, 0.6169066f, 0.6171201f,
            0.6176624f, 0.6183331f, 0.6190299f, 0.6197377f, 0.6203347f,
            0.6211267f, 0.621735f, 0.6223704f, 0.6232555f, 0.6238986f,
            0.6245362f, 0.6250081f, 0.625774f, 0.6260581f, 0.6264848f,
            0.6272694f, 0.6278837f, 0.6283817f, 0.6291963f, 0.629317f,
            0.6300237f, 0.6307474f, 0.6313833f, 0.6319407f, 0.6321245f,
            0.6326772f, 0.633684f, 0.6338503f, 0.6338503f, 0.6338503f,
            0.6340709f, 0.6347841f, 0.6348382f, 0.6355363f, 0.6365799f,
            0.6368375f, 0.6377331f, 0.6382623f, 0.6389993f, 0.6397009f,
            0.6404199f, 0.6414246f, 0.6420857f, 0.6425834f, 0.6435271f,
            0.6442992f, 0.6451072f, 0.6458678f, 0.6463537f, 0.6469417f,
            0.6474265f, 0.6474357f, 0.6482821f, 0.6485194f, 0.6485483f,
            0.6488897f, 0.6494147f, 0.6501867f, 0.650775f, 0.6516662f,
            0.6524901f, 0.6534032f, 0.6545095f, 0.655377f, 0.6567006f,
            0.6577483f, 0.6588307f, 0.6599537f, 0.6611376f, 0.6621104f,
            0.6629901f, 0.6634049f, 0.6644618f, 0.6656815f, 0.6669276f,
            0.6679876f, 0.6685742f, 0.6687511f, 0.6687511f, 0.6690254f,
            0.6700748f, 0.6709313f, 0.6720245f, 0.6732022f, 0.6738502f,
            0.6747413f, 0.6758689f, 0.6768359f, 0.6777692f, 0.6786613f,
            0.6799161f, 0.6808264f, 0.6820251f, 0.6832123f, 0.6842102f,
            0.6849718f, 0.6861355f, 0.6874402f, 0.6887034f, 0.6895158f,
            0.6900738f, 0.6900738f, 0.6909701f, 0.692051f, 0.693094f,
            0.6944431f, 0.6957371f, 0.6967479f, 0.6976193f, 0.6976193f,
            0.6985766f, 0.7001171f, 0.7015388f, 0.7026871f, 0.704132f,
            0.7050238f, 0.7051604f, 0.7067361f, 0.7084311f, 0.7101387f,
            0.7111369f, 0.7122717f, 0.7122717f, 0.7133371f, 0.7152613f,
            0.716764f, 0.7185636f, 0.7194272f, 0.7208767f, 0.7217348f,
            0.7231321f, 0.72486f, 0.7263569f, 0.728127f, 0.729625f,
            0.73181f, 0.733368f, 0.7345548f, 0.7361216f, 0.7379671f,
            0.7393091f, 0.7410294f, 0.742808f, 0.744594f, 0.7468334f,
            0.7484496f, 0.750075f, 0.7523138f, 0.7540376f, 0.7558154f,
            0.7575392f, 0.7592555f, 0.7613432f, 0.7626739f, 0.7645249f,
            0.7645326f, 0.7660442f, 0.76851f, 0.7716573f, 0.7742364f,
            0.776647f, 0.7789749f, 0.7808724f, 0.7834541f, 0.7848886f,
            0.7848886f, 0.7867936f, 0.7883339f, 0.7883781f, 0.7913666f,
            0.7914186f, 0.7926524f, 0.7941343f, 0.7941343f, 0.795979f,
            0.7983785f, 0.7999645f, 0.8024208f, 0.8024275f, 0.8053275f,
            0.8096497f, 0.8126701f, 0.8166543f, 0.8196135f, 0.82349f,
            0.8277086f, 0.8300089f, 0.8331462f, 0.8369119f, 0.8426694f,
            0.8473551f, 0.8524786f, 0.8587514f, 0.8669677f, 0.8739786f,
            0.8819565f, 0.8921061f, 0.904452f, 0.9263667f, 1f,
        };
        public Vector2 point;
        public Vector2 sampleDelta = new Vector2(Mathf.PI * 2, Mathf.Exp(1) * 3);

        static SmoothRng()
        {
            // no need to calculate this if the constants are alread there.
            if (perlinThresholds != null) return;

            // taken from: https://stackoverflow.com/questions/11487759/perlin-noise-to-percentage
            int stepCount = 1000;
            int overCount = 1000;
            int size = stepCount * overCount;

            float[] values = new float[size];
            for (int x = 0; x < size; x++)
            {
                float value = Mathf.PerlinNoise(x * Mathf.Exp(1), (x % 13) * Mathf.PI);
                values[x] = value;
            }

            Array.Sort(values);

            float[] steps = new float[stepCount];
            steps[stepCount - 1] = 1;
            for (int i = 0; i < stepCount - 1; i++)
            {
                steps[i] = values[i * overCount];
            }

            StringBuilder build = new StringBuilder();
            perlinThresholds = new float[stepCount];
            for (int i = 0; i < stepCount; i++)
            {
                build.Append(steps[i]).Append("f, ");
                if (i % 5 == 4) build.Append("\n");
                perlinThresholds[i] = steps[i];
            }

            Debug.Log(build);
        }

        public SmoothRng(float seed, float offset)
        {
            this.seed = seed;
            this.offset = offset;
            Reset();
        }

        public override IRng NewRng()
        {
            return new SmoothRng(Range(0, 100), offset);
        }

        public override float NextFloat()
        {
            float result = Mathf.PerlinNoise(point.x + offset, point.y);
            result = Normalize(result);
            point += sampleDelta;
            return result;
        }

        /// <summary>
        /// Normalize converts from Perlin noise's non-uniform distribution to a uniform distribution.
        /// </summary>
        public static float Normalize(float perlinValue)
        {
            float result;
            int index = Array.BinarySearch(perlinThresholds, perlinValue);
            if (index < 0)
            {
                index = ~index;

                if (index >= perlinThresholds.Length) return 1;
                if (index == 0) return 0;

                Assert.IsTrue(index >= 0);
                Assert.IsTrue(index < perlinThresholds.Length);

                float portion = Mathf.InverseLerp(perlinThresholds[index - 1], perlinThresholds[index], perlinValue);
                result = (index - 1f) / perlinThresholds.Length + portion / perlinThresholds.Length;
            }
            else
            {
                Assert.IsTrue(index >= 0);
                Assert.IsTrue(index < perlinThresholds.Length);

                result = (float)index / perlinThresholds.Length;
            }

            Assert.IsTrue(result >= 0);
            Assert.IsTrue(result <= 1);

            return result;
        }


        /// <summary>
        /// Reset the RNG to the state with the specified seed/offset
        /// </summary>
        public override void Reset()
        {
            point = new Vector2((seed * 1.3215842f) % 100, (seed * 0.8235121f) % 100);
        }
    }
}
